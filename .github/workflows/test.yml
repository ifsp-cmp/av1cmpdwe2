name: Teste da Prova de Programação

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  relatorio-completo:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: cadastro
          MYSQL_USER: admin
          MYSQL_PASSWORD: ifsp@1234
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uadmin -pifsp@1234"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Instalar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Instalar dependências
        run: npm install

      - name: Aguardar MySQL subir
        run: |
          echo "Esperando MySQL..."
          for i in {30..0}; do
            if mysqladmin ping -h"127.0.0.1" -uroot -proot --silent; then
              echo "MySQL está rodando!"
              break
            fi
            echo "Aguardando MySQL... ($i segundos restantes)"
            sleep 2
          done
      
      # Cria um arquivo de relatório vazio para começar
      - name: Criar arquivo de relatório
        run: echo "# Relatório de Análise Automatizada" > relatorio-final.md

      - name: Criar usuário e esquema inicial
        run: |
          mysql -h 127.0.0.1 -uroot -proot cadastro < scripts/init.sql

      - name: Diagnosticar conexão com o usuário admin
        run: |
          mysql -h 127.0.0.1 -uadmin -pifsp@1234 -e "SHOW DATABASES;"

      - name: Rodar testes e adicionar ao relatório
        run: |
          echo "## 🧪 Resultado dos Testes Unitários" >> relatorio-final.md
          npm test -- --colors=false 2>&1 | tee -a >> relatorio-final.md
        env:
          DB_HOST: 127.0.0.1
          DB_USER: admin
          DB_PASSWORD: ifsp@1234
          DB_NAME: biblioteca

      # - name: Rodar ESLint e adicionar ao relatório
      #   run: |
      #     echo "## 🧹 Análise de Estilo do Código (ESLint)" >> relatorio-final.md
      #     npx eslint src/**/*.js >> relatorio-final.md

      - name: Análise de Código com IA (Gemini)
        run: |
          echo "## 🧠 Análise de Código com Gemini" >> relatorio-final.md
          node scripts/ai_review.js >> relatorio-final.md 
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Consolidar relatório da IA
        run: |
          # Adiciona o conteúdo do relatório da IA no relatório final
          cat reports/ai-code-review.md >> relatorio-final.md

      - name: Uploadar Relatório Final
        uses: actions/upload-artifact@v4
        with:
          name: relatorio-completo
          path: relatorio-final.md